const express = require("express");
const cors = require("cors");
const Replicate = require("replicate");
require("dotenv").config();

const app = express();
app.use(cors());
app.use(express.json());

const replicate = new Replicate({
  auth: process.env.REPLICATE_API_TOKEN,
});

if (!process.env.REPLICATE_API_TOKEN) {
  console.error("ERROR: REPLICATE_API_TOKEN is not set in .env");
} else {
  console.log(
    "REPLICATE_API_TOKEN is set and valid:",
    process.env.REPLICATE_API_TOKEN.substring(0, 5) + "..."
  );
}

app.post("/generate-image", async (req, res) => {
  try {
    const { prompt } = req.body;
    console.log("Received prompt:", prompt);
    if (!prompt) {
      return res.status(400).json({ error: "Prompt is required" });
    }

    const model =
      "stability-ai/sdxl:7762fd07cf82c948538e41f63f77d685e02b063e37e496e96eefd46c929f9bdc";
    console.log("Running Replicate with model:", model);
    const output = await replicate.run(model, {
      input: {
        prompt: prompt,
        width: 768,
        height: 768,
        refine: "expert_ensemble_refiner",
        apply_watermark: false,
        num_inference_steps: 25,
        guidance_scale: 7.5,
      },
    });

    console.log("Replicate output (raw):", JSON.stringify(output, null, 2));
    let imageUrl = "";
    if (Array.isArray(output) && output.length > 0) {
      if (typeof output[0] === "string" && output[0].startsWith("http")) {
        imageUrl = output[0]; // URL ישיר
      } else if (output[0] instanceof ReadableStream) {
        // טיפול ב-ReadableStream
        const chunks = [];
        for await (const chunk of output[0]) {
          chunks.push(chunk);
        }
        const imageData = Buffer.concat(chunks).toString("base64");
        imageUrl = `data:image/png;base64,${imageData}`;
      } else {
        console.error("Unexpected Replicate output format:", output);
        return res
          .status(500)
          .json({ error: "Unexpected Replicate output format" });
      }
    } else {
      console.error("No valid output from Replicate:", output);
      return res
        .status(500)
        .json({ error: "No valid image generated by Replicate" });
    }

    res.json({ image: imageUrl });
  } catch (error) {
    console.error("Error in generate-image:", error.message, error.stack);
    res
      .status(500)
      .json({ error: "Internal server error", details: error.message });
  }
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
